use quirky_binder::{
    filter::{
        function::{
            produce::function_produce,
            terminate::function_terminate,
            update::function_update,
        },
        sort::sort,
    },
};

{
  (
      function_produce(
        fields: [("num", "i8")],
        body: r#"
            use rand::Rng;
            use rand_chacha::rand_core::SeedableRng;

            let mut rng = rand_chacha::ChaCha8Rng::from_entropy();
            println!("Seed: {:02x?}", rng.get_seed());

            for _ in 0..(1024 * 1024) {
                let num: i8 = rng.gen();

                let record = new_record(num);
                output.send(Some(record))?;
            }
            output.send(None)?;
            Ok(())
"#,
      )
    - sort(fields: ["num"])
    - function_update(
        body: r#"
            let mut prev_num = None;
            input.inspect(move |record| {
                if let Some(prev_num) = prev_num {
                    assert_le!(prev_num, *record.num());
                }
                prev_num = Some(*record.num());
                Ok(())
            })
"#,
      )
    - sort(fields: [Descending("num")])
    - function_terminate(
        body: r#"
            let mut read = 0;
            let mut prev_num = None;
            while let Some(record) = input.next()? {
                if let Some(prev_num) = prev_num {
                    assert_ge!(prev_num, *record.num());
                }
                prev_num = Some(*record.num());
                read += 1;
            }
            assert_eq!(1024 * 1024, read);
            Ok(())
"#,
      )
  )
}
