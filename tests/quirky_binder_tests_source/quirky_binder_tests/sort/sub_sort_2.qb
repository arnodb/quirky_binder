use quirky_binder::{
    filter::{
        function::{
            produce::function_produce,
            terminate::function_terminate,
            update::function_update,
        },
        group::{group, sub_group},
        sort::sub_sort,
    },
};

{
  (
      function_produce(
        fields: [("num", "i8")],
        body: r#"
            use rand::Rng;
            use rand_chacha::rand_core::SeedableRng;

            let mut rng = rand_chacha::ChaCha8Rng::from_entropy();
            println!("Seed: {:02x?}", rng.get_seed());

            for _ in 0..1024 {
                let num: i8 = rng.gen();

                let record = new_record(num);
                output.send(Some(record))?;
            }
            output.send(None)?;
            Ok(())
"#,
      )
    - group(group_field: "group", fields: ["num"])
    - sub_group(path_fields: ["group"], group_field: "sub_group", fields: ["num"])
    - sub_sort(path_fields: ["group", "sub_group"], fields: ["num"])
    - function_update(
        body: r#"
            input.inspect(|group_record| {
                for sub_group_record in group_record.group().iter() {
                    let mut prev_num = None;
                    for record in sub_group_record.sub_group().iter() {
                        if let Some(prev_num) = prev_num {
                            assert_le!(prev_num, *record.num());
                        }
                        prev_num = Some(*record.num());
                    }
                }
                Ok(())
            })
"#,
      )
    - sub_sort(path_fields: ["group", "sub_group"], fields: [Descending("num")])
    - function_terminate(
        body: r#"
            let mut read = 0;
            while let Some(group_record) = input.next()? {
                for sub_group_record in group_record.group().iter() {
                    let mut prev_num = None;
                    for record in sub_group_record.sub_group().iter() {
                        if let Some(prev_num) = prev_num {
                            assert_ge!(prev_num, *record.num());
                        }
                        prev_num = Some(*record.num());
                        read += 1;
                    }
                }
            }
            assert_eq!(1024, read);
            Ok(())
"#,
      )
  )
}
