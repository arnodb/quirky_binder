use quirky_binder::{
    filter::{
        debug::debug,
        function::{
            produce::function_produce,
            terminate::function_terminate,
        },
        group::group,
        sort::sort,
        ungroup::ungroup,
    },
};

{
  (
      function_produce(
        fields: [("num", "u8"), ("lsb2", "u8")],
        body: r#"
            use rand::Rng;
            use rand_chacha::rand_core::SeedableRng;

            let mut rng = rand_chacha::ChaCha8Rng::from_entropy();
            println!("Seed: {:02x?}", rng.get_seed());

            for _ in 0..1024 {
                let num: u8 = rng.gen();

                let record = new_record(num, num & 0x03);
                output.send(Some(record))?;
            }
            output.send(None)?;
            Ok(())
"#,
      )
    - sort(fields: ["lsb2"])
    - group(by_fields: ["lsb2"], group_field: "group")
    - ungroup(group_field: "group")
    - debug()
    - function_terminate(
        body: r#"
            let mut read = 0;
            while let Some(ungroup_record) = input.next()? {
                let lsb2 = *ungroup_record.lsb2();
                assert_eq!(lsb2, ungroup_record.num() & 0x03, "lsb2");
                read += 1;
            }
            assert_eq!(1024, read);
            Ok(())
"#,
      )
  )
}
