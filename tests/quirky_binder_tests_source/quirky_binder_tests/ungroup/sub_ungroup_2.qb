use quirky_binder::{
    filter::{
        debug::debug,
        function::{
            produce::function_produce,
            terminate::function_terminate,
            update::function_update,
        },
        group::{group, sub_group},
        sort::{sort, sub_sort},
        ungroup::sub_ungroup,
    },
};

{
  (
      function_produce(
        fields: [("num", "u8"), ("lsb2", "u8"), ("lsb4", "u8"), ("lsb6", "u8")],
        body: r#"
            use rand::Rng;
            use rand_chacha::rand_core::SeedableRng;

            let mut rng = rand_chacha::ChaCha8Rng::from_entropy();
            println!("Seed: {:02x?}", rng.get_seed());

            for _ in 0..1024 {
                let num: u8 = rng.gen();

                let record = new_record(num, num & 0x03, num & 0x0f, num & 0x3f);
                output.send(Some(record))?;
            }
            output.send(None)?;
            Ok(())
"#,
      )
    - sort(fields: ["lsb2", "lsb4", "lsb6"])
    - group(group_field: "group", fields: ["num", "lsb4", "lsb6"])
    - sub_group(path_fields: ["group"], group_field: "sub_group", fields: ["num", "lsb6"])
    - sub_group(path_fields: ["group", "sub_group"], group_field: "sub_sub_group", fields: ["num"])
    - sub_ungroup(path_fields: ["group", "sub_group"], group_field: "sub_sub_group")
    - debug()
    - function_terminate(
        body: r#"
            use std::collections::BTreeSet;

            let mut read = 0;
            let mut seen2 = BTreeSet::<u8>::new();
            while let Some(group_record) = input.next()? {
                let lsb2 = *group_record.lsb2();
                assert!(!seen2.contains(&lsb2), "Already seen lsb2 {}", lsb2);
                seen2.insert(lsb2);
                let mut seen4 = BTreeSet::<u8>::new();
                for sub_group_record in group_record.group().iter() {
                    let lsb4 = *sub_group_record.lsb4();
                    assert!(!seen4.contains(&lsb4), "Already seen lsb2 {} lsb4 {}", lsb2, lsb4);
                    seen4.insert(lsb4);
                    for sub_sub_ungroup_record in sub_group_record.sub_group().iter() {
                        let lsb6 = *sub_sub_ungroup_record.lsb6();
                        assert_eq!(lsb2, sub_sub_ungroup_record.num() & 0x03, "lsb2");
                        assert_eq!(lsb4, sub_sub_ungroup_record.num() & 0x0f, "lsb4");
                        assert_eq!(lsb6, sub_sub_ungroup_record.num() & 0x3f, "lsb6");
                        read += 1;
                    }
                }
            }
            assert_eq!(1024, read);
            Ok(())
"#,
      )
  )
}
